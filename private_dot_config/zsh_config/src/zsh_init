#!/bin/zsh
# vim:foldmethod=marker

KEYTIMEOUT=50
local SK_HEIGHT=20

# aliases {{{

# base
alias l="ls -l --color=auto"
alias ls="ls --color=auto"
alias la="ls -a --color=auto"
alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"
alias diff="diff --color=auto"
alias rmr="rm -rf"
alias pg="$PAGER"
alias wget="wget --hsts-file=${XDG_DATA_HOME}/wget-hsts"
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# chezmoi
alias cz="chezmoi"

# git
alias ,="git"
alias ,s="git status -sb ."
alias ,status="git status"
alias ,clone="git clone"
alias ,l="git log --oneline --graph --decorate -10 | cat"
alias ,la="git log --oneline --graph --decorate --all"
alias ,lo="git log --oneline --graph --decorate"
alias ,log="git log"
alias ,ls="git ls-files -tco"
alias ,b="git branch"
alias ,sb="git show-branch"
alias ,a="git add"
alias ,ch="git checkout"
alias ,stash="git stash"
alias ,fetch="git fetch"
alias ,pull="git pull"
alias ,push="git push"
alias ,commit="git commit"
alias ,merge="git merge"
alias ,rebase="git rebase"
alias ,apply="git apply"
alias ,d="git diff | $PAGER"
alias ,diff="git diff"
alias ,r="git remote -v"
alias ,rem="git remote"
alias ,reset="git reset"
alias ,restore="git restore"
alias ,mod="git submodule"
alias ,tag="git tag -n --sort=-version:refname"
alias ,rm="git rm"
alias ,mv="git mv"

# bat
alias cat="bat -pp"

# skim
alias sk="sk -p ' ' --inline-info --bind=ctrl-n:down,ctrl-p:up,alt-n:up,alt-p:down,alt-m:accept,ctrl-g:abort"

# xclip
alias cl="xclip -selection clipboard"

# neovim
alias v="$EDITOR"
alias suv="sudo $EDITOR"

# trashman
alias tm="trashman"

# }}}
# options {{{

# Load git version control information
autoload -Uz vcs_info

# parameter expansion, command substitution and arithmetic expansion for prompts
# needed for git repo and vterm prompt tracking
setopt PROMPT_SUBST

# Format the vcs_info_msg_0_ variable
zstyle ':vcs_info:git:*' formats '(%b) '

# edit line in $EDITOR
autoload edit-command-line
zle -N edit-command-line

# completion
fpath=($HOME/.config/zsh_config/src/completions/zsh-completions/src/ $fpath)
autoload -Uz compinit
compinit -d "$XDG_CACHE_HOME/zsh_compdump"
_comp_options+=(globdots)

# history
HISTFILE="$XDG_CACHE_HOME/zsh_history"
HISTSIZE=1000
SAVEHIST=1000
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt inc_append_history

# type only directory name to cd
setopt auto_cd

# turn off case sensitivity
setopt no_case_glob

# # wildcard fix maybe??
# setopt extended_glob

# }}}
# functions {{{

# find file with sk
#   if cmdline buffer is empty, open file in nvim
#   if cmdline buffer is not empty, return path of file
function __find_file()
{
    if [ -z $BUFFER ]
    then
        local file=$(fd -E .git -t f\
            | sk --height=$SK_HEIGHT --preview 'bat -ppf --line-range :500 {}'\
                --bind=alt-h:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $file ] && return
        BUFFER="$EDITOR $file"
        zle accept-line
    else
        local file=$(fd -E .git -t f\
            | sk --height=$SK_HEIGHT\
                --bind=alt-h:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $file ] && return
        BUFFER+=" $file"
        zle end-of-line
    fi
}
zle -N __find_file

# find a hidden file with sk
#   if cmdline buffer is empty, open hidden file in nvim
#   if cmdline buffer is not empty, return path of hidden file
function __find_hidden_file()
{
    if [ -z $BUFFER ]
    then
        local file=$(fd -E .git -t f -H\
            | rg "^\."\
            | sk --height=$SK_HEIGHT --preview 'bat -ppf --line-range :500 {}'\
                --bind=alt-h:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $file ] && return
        BUFFER="$EDITOR $file"
        zle accept-line
    else
        local file=$(fd -E .git -t f -H\
            | rg "^\."\
            | sk --height=$SK_HEIGHT\
                --bind=alt-h:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $file ] && return
        BUFFER+=" $file"
        zle end-of-line
    fi
}
zle -N __find_hidden_file

# find a directory with sk
#   if cmdline buffer is empty, cd into directory
#   if cmdline buffer is not empty, return path of directory
function __find_directory()
{
    if [ -z $BUFFER ]
    then
        local dir=$(fd -t d\
            | sk --height=$SK_HEIGHT\
                --bind=alt-g:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $dir ] && return
        BUFFER="cd $dir"
        zle accept-line
    else
        local dir=$(fd -t d\
            | sk --height=$SK_HEIGHT\
                --bind=alt-g:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $dir ] && return
        BUFFER+=" $dir"
        zle end-of-line
    fi
}
zle -N __find_directory

# find a hidden directory with sk
#   if cmdline buffer is empty, cd into directory
#   if cmdline buffer is not empty, return path of directory
function __find_hidden_directory
{
    if [ -z $BUFFER ]
    then
        local dir=$(fd -t d -H\
            | rg "^\."\
            | sk --height=$SK_HEIGHT\
                --bind=alt-g:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $dir ] && return
        BUFFER="cd $dir"
        zle accept-line
    else
        local dir=$(fd -t d -H\
            | rg "^\."\
            | sk --height=$SK_HEIGHT\
                --bind=alt-g:abort\
            | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
        zle reset-prompt
        [ -z $dir ] && return
        BUFFER+=" $dir"
        zle end-of-line
    fi
}
zle -N __find_hidden_directory

# operate a file with xdg-open
function __open_file()
{
    local file=$(fd -E .git -t f\
        | sk --height=$SK_HEIGHT)
            # --bind=ctrl-o:abort)
        # | sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/')
    zle reset-prompt
    [ -z $file ] && return
    xdg-open $file
}
zle -N __open_file

# interrogate ps about cpu usage
function __list_pid()
{
    # local proc=$(ps axuk %cpu | awk '{print $2"\t"$1"\t"$3" "$4" "$9" "$10" "$11}' |
    #     sk --reverse --no-sort --tac\
    #         --header='id      user    cpu mem start time command')
    # zle reset-prompt
    # [ -z $proc ] && return
    # echo $proc
    # BUFFER=" top -o '+%CPU'"
    BUFFER=" htop --sort-key=PERCENT_CPU"
    zle accept-line
}
zle -N __list_pid

# interrogate ps about mem usage
function __interrogate_proc_mem()
{
    # local proc=$(ps axuk %mem | awk '{print $2"\t"$1"\t"$4" "$3" "$9" "$10" "$11}' |
    #     sk --reverse --no-sort --tac\
    #         --header='id      user    mem cpu start time command')
    # zle reset-prompt
    # [ -z $proc ] && return
    # echo $proc
    BUFFER=" top -o '+%MEM'"
    zle accept-line
}
zle -N __interrogate_proc_mem

function __find_env()
{
    # local env_var=$(env | sk --reverse --tac)
    local env_var=$(env\
        | sk --tac)
            # --bind=ctrl-e:abort)
    zle reset-prompt
    [ -z $env_var ] && return
    if [ -z $BUFFER ]; then
        echo $env_var
    else
        BUFFER+=$env_var
        zle end-of-line
    fi
}
zle -N __find_env

function __kill_pid()
{
    # local proc=$(ps axuk %cpu | awk '{print $2"\t"$1"\t"$3" "$4" "$9" "$10" "$11}' |
    #     sk --reverse --no-sort --tac --color=header:160\
    #         --header="id      user    cpu mem start time command" | awk '{print $1}')
    local proc=$(ps axuk %cpu | awk '{print $2"\t"$1"\t"$3" "$4" "$9" "$10" "$11}' |\
        sk --no-sort --tac --color=header:160\
            --header="id      user    cpu mem start time command" | awk '{print $1}')
    zle reset-prompt
    [ -z $proc ] && return
    sudo kill $proc
}
zle -N __kill_pid

function __find_hist()
{
    # local cmd=$(bat -pp "$HISTFILE" |
    #     sk --reverse --tac --no-sort --height=$SK_HEIGHT)
    local cmd=$(bat -pp "$HISTFILE" |
        sk --tac --no-sort --height=$SK_HEIGHT)
            # --bind=ctrl-r:abort)
    zle reset-prompt
    [ -z $cmd ] && return
    zle push-input
    BUFFER=$cmd
    zle end-of-line
}
zle -N __find_hist

export mnt="$HOME/.mnt"
function __mount_drive()
{
    [ ! -d $mnt ] && mkdir $mnt
    for m in $(lsblk | tail +2 | awk -F ' ' '{print $7}'); do
        if [[ $m == $mnt ]]; then
            mntdev=$(findmnt $mnt | tail -1 | cut -d' ' -f2)
            echo -n "unmount $mntdev? y/N "
            read -r -k1 yn
            zle reset-prompt
            [[ $yn == 'y' ]] && BUFFER="sudo umount '$mnt'" && zle accept-line
            return
        fi
    done
    lsblk
    # local dev=$(fd . '/dev/' | sk --reverse --height=$SK_HEIGHT)
    local dev=$(fd . '/dev/'\
        | sk --height=$SK_HEIGHT)
            # --bind=alt-ctrl-m:abort)
    zle reset-prompt
    [ -z $dev ] && return
    BUFFER="sudo mount '$dev' $mnt"
    zle accept-line
}
zle -N __mount_drive

# run updatedb before locate
function locat()
{
    sudo updatedb
    locate $1
}

# }}}
# plugins {{{

# zoxide
eval "$(zoxide init zsh)"

# syntax highlighting
source "$ZSH_BIN/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# history substring
source "$ZSH_BIN/zsh-history-substring-search.zsh"
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=blue,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=red,bold'

# }}}
# emacs mode {{{

set -o emacs

# bindkey -M emacs '^[h' backward-delete-char
# bindkey -M emacs '^[H' backward-delete-word

bindkey -M emacs "^[m" accept-line

# nav
bindkey -M emacs "^[h" __find_file
bindkey -M emacs "^[g" __find_directory
bindkey -M emacs "^[^h" __find_hidden_file
bindkey -M emacs "^[^g" __find_hidden_directory
# xdg-open
bindkey -M emacs "^[^o" __open_file
# env
bindkey -M emacs "^[^e" __find_env
# hist
bindkey -M emacs "^[^r" __find_hist
# mount
bindkey -M emacs "^[^m" __mount_drive
# pid
bindkey -M emacs "^[^k" __kill_pid
bindkey -M emacs "^[^p" __list_pid
# zsh-history-substring-search
bindkey -M emacs '^n' history-substring-search-down
bindkey -M emacs '^[n' history-substring-search-up
bindkey -M emacs '^p' history-substring-search-up
bindkey -M emacs '^[p' history-substring-search-down
bindkey -M emacs '<Up>' history-substring-search-up
bindkey -M emacs '<Down>' history-substring-search-down

# }}}
# shell side vterm {{{

# passes messages from shell to vterm via properly escaped sequences
function vterm_printf()
{
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# directory and prompt tracking
function vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
}

PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'

# }}}
